name: Release (tag → npm publish)

on:
  push:
    tags:
      - '@ngx-runtime-i18n/core@*'
      - '@ngx-runtime-i18n/angular@*'

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      CI: true
      NX_DAEMON: false
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_CONFIG_PROVENANCE: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: 'https://registry.npmjs.org'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci --prefer-offline --no-audit --fund=false; else npm install --prefer-offline --no-audit --fund=false; fi

      - name: Parse tag → lib + version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"  # e.g., @ngx-runtime-i18n/angular@1.0.0
          LIB_FROM_TAG="${TAG%@*}"  # → "@ngx-runtime-i18n/angular"  (remove shortest '@*' from end)
          VER_FROM_TAG="${TAG##*@}" # → "1.0.0" (take after last '@')

          case "$LIB_FROM_TAG" in
            @ngx-runtime-i18n/core)    PROJECT="runtime-i18n" ;;
            @ngx-runtime-i18n/angular) PROJECT="runtime-i18n-angular" ;;
            *) echo "Unknown library from tag: $LIB_FROM_TAG (tag was: $TAG)"; exit 1 ;;
          esac

          echo "lib_scope=$LIB_FROM_TAG"   >> $GITHUB_OUTPUT
          echo "lib_project=$PROJECT"      >> $GITHUB_OUTPUT
          echo "lib_version=$VER_FROM_TAG" >> $GITHUB_OUTPUT

      - name: Build from source (prod)
        run: npx nx build ${{ steps.meta.outputs.lib_project }} --configuration=production

      - name: Ensure dist package.json version === tag version
        shell: bash
        run: |
          set -euo pipefail
          DIST_PKG="dist/libs/${{ steps.meta.outputs.lib_project }}/package.json"
          test -f "$DIST_PKG"
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync(process.env.DIST_PKG,'utf8'));if(p.version!==process.env.TAG_VER){console.error('Version mismatch:',p.version,'!=',process.env.TAG_VER);process.exit(1)}" \
            DIST_PKG="$DIST_PKG" TAG_VER="${{ steps.meta.outputs.lib_version }}"

      - name: Force public publishConfig + keep provenance disabled
        shell: bash
        run: |
          set -euo pipefail
          DIST_PKG="dist/libs/${{ steps.meta.outputs.lib_project }}/package.json"
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync(process.env.DIST_PKG,'utf8'));p.publishConfig=p.publishConfig||{};p.publishConfig.access='public';p.publishConfig.provenance=false;fs.writeFileSync(process.env.DIST_PKG,JSON.stringify(p,null,2));console.log('publishConfig:',p.publishConfig)" \
            DIST_PKG="$DIST_PKG"

      - name: Publish to npm (org-scoped, public, provenance off)
        working-directory: dist/libs/${{ steps.meta.outputs.lib_project }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: 'false'
        run: npm publish --access public
