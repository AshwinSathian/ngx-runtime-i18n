name: Release (tag → npm publish)

on:
  push:
    tags:
      - '@ngx-runtime-i18n/core@*'
      - '@ngx-runtime-i18n/angular@*'

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      NX_DAEMON: 'false'
      CI: 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: npm

      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Derive lib + version from tag
        id: meta
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"  # e.g., @ngx-runtime-i18n/core@1.2.0
          LIB_FROM_TAG="${TAG%%@*}" # → "@ngx-runtime-i18n/core"
          VER_FROM_TAG="${TAG##*@}" # → "1.2.0"

          case "$LIB_FROM_TAG" in
            @ngx-runtime-i18n/core)    PROJECT="runtime-i18n" ;;
            @ngx-runtime-i18n/angular) PROJECT="runtime-i18n-angular" ;;
            *) echo "Unknown tag prefix: $LIB_FROM_TAG"; exit 1 ;;
          esac

          echo "lib_npm=$LIB_FROM_TAG"   >> $GITHUB_OUTPUT
          echo "lib_project=$PROJECT"    >> $GITHUB_OUTPUT
          echo "version=$VER_FROM_TAG"   >> $GITHUB_OUTPUT

      - name: Build target lib (prod)
        run: npx nx run ${{ steps.meta.outputs.lib_project }}:build:production

      - name: Patch dist package.json version to match tag
        shell: bash
        run: |
          DIST_PKG="dist/libs/${{ steps.meta.outputs.lib_project }}/package.json"
          TAG_VER="${{ steps.meta.outputs.version }}"
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync(process.env.DIST_PKG,'utf8'));if(p.version!==process.env.TAG_VER){p.version=process.env.TAG_VER;fs.writeFileSync(process.env.DIST_PKG,JSON.stringify(p,null,2));console.log('Patched to',process.env.TAG_VER)}else{console.log('Version OK',p.version)}"

      - name: Ensure publishConfig & force public + provenance=false
        shell: bash
        run: |
          DIST_PKG="dist/libs/${{ steps.meta.outputs.lib_project }}/package.json"
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync(process.env.DIST_PKG,'utf8'));p.publishConfig=p.publishConfig||{};p.publishConfig.access='public';p.publishConfig.provenance=false;fs.writeFileSync(process.env.DIST_PKG,JSON.stringify(p,null,2));console.log('publishConfig=',p.publishConfig)"

      - name: Publish to npm
        working-directory: dist/libs/${{ steps.meta.outputs.lib_project }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: 'false'
        run: npm publish --access public
