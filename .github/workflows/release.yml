name: Release (tag → npm publish)

on:
  push:
    tags:
      - '@ngx-runtime-i18n/core@*'
      - '@ngx-runtime-i18n/angular@*'

permissions:
  contents: read
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      CI: true
      NX_DAEMON: false
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_CONFIG_PROVENANCE: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: 'https://registry.npmjs.org'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit --fund=false
          else
            npm install --prefer-offline --no-audit --fund=false
          fi

      - name: Parse tag → lib + version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"          # e.g. @ngx-runtime-i18n/angular@1.0.0
          LIB_FROM_TAG="${TAG%@*}"          # → "@ngx-runtime-i18n/angular"
          VER_FROM_TAG="${TAG##*@}"         # → "1.0.0"

          case "$LIB_FROM_TAG" in
            @ngx-runtime-i18n/core)    PROJECT="runtime-i18n" ;;
            @ngx-runtime-i18n/angular) PROJECT="runtime-i18n-angular" ;;
            *) echo "Unknown library from tag: $LIB_FROM_TAG (tag: $TAG)" >&2; exit 1 ;;
          esac

          echo "lib_scope=$LIB_FROM_TAG"   >> $GITHUB_OUTPUT
          echo "lib_project=$PROJECT"      >> $GITHUB_OUTPUT
          echo "lib_version=$VER_FROM_TAG" >> $GITHUB_OUTPUT
          echo "Parsed → $LIB_FROM_TAG | project=$PROJECT | version=$VER_FROM_TAG"

      - name: Build from source (prod)
        run: npx nx build ${{ steps.meta.outputs.lib_project }} --configuration=production

      - name: Sanitize dist package.json, enforce version & publishConfig
        shell: bash
        run: |
          set -euo pipefail
          DIST_PKG="dist/libs/${{ steps.meta.outputs.lib_project }}/package.json"
          echo "Sanitizing $DIST_PKG ..."
          test -f "$DIST_PKG"

          TAG_VER="${{ steps.meta.outputs.lib_version }}"
          tmp="$(mktemp)"
          # 1) Enforce version from tag
          jq --arg v "$TAG_VER" '.version = $v' "$DIST_PKG" > "$tmp" && mv "$tmp" "$DIST_PKG"

          # 2) Remove fields npm registry rejects on publish
          tmp="$(mktemp)"
          jq 'del(.deprecations, .deprecated, .publishConfig.deprecations)' "$DIST_PKG" > "$tmp" && mv "$tmp" "$DIST_PKG"

          # 3) Ensure public access + provenance disabled (explicit)
          tmp="$(mktemp)"
          jq '
            .publishConfig = (.publishConfig // {}) |
            .publishConfig.access = "public" |
            .publishConfig.provenance = false
          ' "$DIST_PKG" > "$tmp" && mv "$tmp" "$DIST_PKG"

          echo "Final manifest:"
          cat "$DIST_PKG"

          # 4) Double-check version equality
          DIST_VER="$(jq -r '.version' "$DIST_PKG")"
          if [ "$DIST_VER" != "$TAG_VER" ]; then
            echo "Version mismatch: $DIST_VER != $TAG_VER" >&2
            exit 1
          fi

      - name: Publish to npm (org-scoped, public, provenance off)
        working-directory: dist/libs/${{ steps.meta.outputs.lib_project }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: 'false'
        run: npm publish --access public
